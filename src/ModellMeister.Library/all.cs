//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModellMeister.Library.Physics {
    
    
    [ModellMeister.Runtime.RootModelAttribute()]
    public partial class _ : ModellMeister.Runtime.ICompositeModelType {
        
        public object GetPortValue(string name) {
            throw new System.InvalidOperationException();
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
        }
        
        public object GetBlock(string name) {
            throw new System.InvalidOperationException();
        }
    }
}
namespace ModellMeister.Library.Algebra {
    
    
    public partial class Addition : ModellMeister.Runtime.IModelType {
        
        private double _Summand1;
        
        private double _Summand2;
        
        private double _Sum;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Summand1 {
            get {
                return this._Summand1;
            }
            set {
                this._Summand1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Summand2 {
            get {
                return this._Summand2;
            }
            set {
                this._Summand2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Sum {
            get {
                return this._Sum;
            }
            set {
                this._Sum = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Summand1")) {
                return this.Summand1;
            }
            if ((name == "Summand2")) {
                return this.Summand2;
            }
            if ((name == "Sum")) {
                return this.Sum;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Subtraction : ModellMeister.Runtime.IModelType {
        
        private double _Minuend;
        
        private double _Subtrahend;
        
        private double _Difference;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Minuend {
            get {
                return this._Minuend;
            }
            set {
                this._Minuend = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Subtrahend {
            get {
                return this._Subtrahend;
            }
            set {
                this._Subtrahend = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Difference {
            get {
                return this._Difference;
            }
            set {
                this._Difference = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Minuend")) {
                return this.Minuend;
            }
            if ((name == "Subtrahend")) {
                return this.Subtrahend;
            }
            if ((name == "Difference")) {
                return this.Difference;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Multiplication : ModellMeister.Runtime.IModelType {
        
        private double _Factor1;
        
        private double _Factor2;
        
        private double _Product;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Factor1 {
            get {
                return this._Factor1;
            }
            set {
                this._Factor1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Factor2 {
            get {
                return this._Factor2;
            }
            set {
                this._Factor2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Product {
            get {
                return this._Product;
            }
            set {
                this._Product = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Factor1")) {
                return this.Factor1;
            }
            if ((name == "Factor2")) {
                return this.Factor2;
            }
            if ((name == "Product")) {
                return this.Product;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Division : ModellMeister.Runtime.IModelType {
        
        private double _Divident;
        
        private double _Divisor;
        
        private double _Quotient;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Divident {
            get {
                return this._Divident;
            }
            set {
                this._Divident = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Divisor {
            get {
                return this._Divisor;
            }
            set {
                this._Divisor = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Quotient {
            get {
                return this._Quotient;
            }
            set {
                this._Quotient = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Divident")) {
                return this.Divident;
            }
            if ((name == "Divisor")) {
                return this.Divisor;
            }
            if ((name == "Quotient")) {
                return this.Quotient;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Square : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class SquareRoot : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Sine : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Cosine : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Tangens : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Exponentation : ModellMeister.Runtime.IModelType {
        
        private double _Base;
        
        private double _Exponent;
        
        private double _Power;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Base {
            get {
                return this._Base;
            }
            set {
                this._Base = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Exponent {
            get {
                return this._Exponent;
            }
            set {
                this._Exponent = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Power {
            get {
                return this._Power;
            }
            set {
                this._Power = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Base")) {
                return this.Base;
            }
            if ((name == "Exponent")) {
                return this.Exponent;
            }
            if ((name == "Power")) {
                return this.Power;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Reciprocal : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Logarithm : ModellMeister.Runtime.IModelType {
        
        private double _Antilogarithm;
        
        private double _Base;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Antilogarithm {
            get {
                return this._Antilogarithm;
            }
            set {
                this._Antilogarithm = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Base {
            get {
                return this._Base;
            }
            set {
                this._Base = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Antilogarithm")) {
                return this.Antilogarithm;
            }
            if ((name == "Base")) {
                return this.Base;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
}
namespace ModellMeister.Library.Analysis {
    
    
    public partial class Integral : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Derivative : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
}
namespace ModellMeister.Library.Comparison {
    
    
    public partial class Equal : ModellMeister.Runtime.IModelType {
        
        private double _Input1;
        
        private double _Input2;
        
        private bool _Result;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input1 {
            get {
                return this._Input1;
            }
            set {
                this._Input1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input2 {
            get {
                return this._Input2;
            }
            set {
                this._Input2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Result {
            get {
                return this._Result;
            }
            set {
                this._Result = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input1")) {
                return this.Input1;
            }
            if ((name == "Input2")) {
                return this.Input2;
            }
            if ((name == "Result")) {
                return this.Result;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class NotEqual : ModellMeister.Runtime.IModelType {
        
        private double _Input1;
        
        private double _Input2;
        
        private bool _Result;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input1 {
            get {
                return this._Input1;
            }
            set {
                this._Input1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input2 {
            get {
                return this._Input2;
            }
            set {
                this._Input2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Result {
            get {
                return this._Result;
            }
            set {
                this._Result = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input1")) {
                return this.Input1;
            }
            if ((name == "Input2")) {
                return this.Input2;
            }
            if ((name == "Result")) {
                return this.Result;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class GreaterThan : ModellMeister.Runtime.IModelType {
        
        private double _Input1;
        
        private double _Input2;
        
        private bool _Result;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input1 {
            get {
                return this._Input1;
            }
            set {
                this._Input1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input2 {
            get {
                return this._Input2;
            }
            set {
                this._Input2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Result {
            get {
                return this._Result;
            }
            set {
                this._Result = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input1")) {
                return this.Input1;
            }
            if ((name == "Input2")) {
                return this.Input2;
            }
            if ((name == "Result")) {
                return this.Result;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class SmallerThan : ModellMeister.Runtime.IModelType {
        
        private double _Input1;
        
        private double _Input2;
        
        private bool _Result;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input1 {
            get {
                return this._Input1;
            }
            set {
                this._Input1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input2 {
            get {
                return this._Input2;
            }
            set {
                this._Input2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Result {
            get {
                return this._Result;
            }
            set {
                this._Result = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input1")) {
                return this.Input1;
            }
            if ((name == "Input2")) {
                return this.Input2;
            }
            if ((name == "Result")) {
                return this.Result;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class GreaterOrEqualThan : ModellMeister.Runtime.IModelType {
        
        private double _Input1;
        
        private double _Input2;
        
        private bool _Result;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input1 {
            get {
                return this._Input1;
            }
            set {
                this._Input1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input2 {
            get {
                return this._Input2;
            }
            set {
                this._Input2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Result {
            get {
                return this._Result;
            }
            set {
                this._Result = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input1")) {
                return this.Input1;
            }
            if ((name == "Input2")) {
                return this.Input2;
            }
            if ((name == "Result")) {
                return this.Result;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class SmallerOrEqualThan : ModellMeister.Runtime.IModelType {
        
        private double _Input1;
        
        private double _Input2;
        
        private bool _Result;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input1 {
            get {
                return this._Input1;
            }
            set {
                this._Input1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input2 {
            get {
                return this._Input2;
            }
            set {
                this._Input2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Result {
            get {
                return this._Result;
            }
            set {
                this._Result = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input1")) {
                return this.Input1;
            }
            if ((name == "Input2")) {
                return this.Input2;
            }
            if ((name == "Result")) {
                return this.Result;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
}
namespace ModellMeister.Library.ControlFlow {
    
    
    public partial class Switch : ModellMeister.Runtime.IModelType {
        
        private bool _Condition;
        
        private double _TrueValue;
        
        private double _FalseValue;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Condition {
            get {
                return this._Condition;
            }
            set {
                this._Condition = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double TrueValue {
            get {
                return this._TrueValue;
            }
            set {
                this._TrueValue = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double FalseValue {
            get {
                return this._FalseValue;
            }
            set {
                this._FalseValue = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Condition")) {
                return this.Condition;
            }
            if ((name == "TrueValue")) {
                return this.TrueValue;
            }
            if ((name == "FalseValue")) {
                return this.FalseValue;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
}
namespace ModellMeister.Library.Helper {
    
    
    public partial class CurrentTime : ModellMeister.Runtime.IModelType {
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class ExecutionAbort : ModellMeister.Runtime.IModelType {
        
        private bool _Condition;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Condition {
            get {
                return this._Condition;
            }
            set {
                this._Condition = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Condition")) {
                return this.Condition;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
}
namespace ModellMeister.Library.Logic {
    
    
    public partial class And : ModellMeister.Runtime.IModelType {
        
        private bool _Input1;
        
        private bool _Input2;
        
        private bool _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Input1 {
            get {
                return this._Input1;
            }
            set {
                this._Input1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Input2 {
            get {
                return this._Input2;
            }
            set {
                this._Input2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input1")) {
                return this.Input1;
            }
            if ((name == "Input2")) {
                return this.Input2;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Not : ModellMeister.Runtime.IModelType {
        
        private bool _Input;
        
        private bool _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Or : ModellMeister.Runtime.IModelType {
        
        private bool _Input1;
        
        private bool _Input2;
        
        private bool _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Input1 {
            get {
                return this._Input1;
            }
            set {
                this._Input1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Input2 {
            get {
                return this._Input2;
            }
            set {
                this._Input2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input1")) {
                return this.Input1;
            }
            if ((name == "Input2")) {
                return this.Input2;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Xor : ModellMeister.Runtime.IModelType {
        
        private bool _Input1;
        
        private bool _Input2;
        
        private bool _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Input1 {
            get {
                return this._Input1;
            }
            set {
                this._Input1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Input2 {
            get {
                return this._Input2;
            }
            set {
                this._Input2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public bool Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input1")) {
                return this.Input1;
            }
            if ((name == "Input2")) {
                return this.Input2;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
}
namespace ModellMeister.Library.Statistics {
    
    
    public partial class Average : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Variance : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
}
namespace ModellMeister.Library.Source {
    
    
    public partial class Constant : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Input")) {
                return this.Input;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Sine : ModellMeister.Runtime.IModelType {
        
        private double _Frequency;
        
        private double _Phase;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Frequency {
            get {
                return this._Frequency;
            }
            set {
                this._Frequency = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Phase {
            get {
                return this._Phase;
            }
            set {
                this._Phase = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Frequency")) {
                return this.Frequency;
            }
            if ((name == "Phase")) {
                return this.Phase;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Triangle : ModellMeister.Runtime.IModelType {
        
        private double _Frequency;
        
        private double _Phase;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Frequency {
            get {
                return this._Frequency;
            }
            set {
                this._Frequency = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Phase {
            get {
                return this._Phase;
            }
            set {
                this._Phase = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Frequency")) {
                return this.Frequency;
            }
            if ((name == "Phase")) {
                return this.Phase;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
    
    public partial class Sawtooth : ModellMeister.Runtime.IModelType {
        
        private double _Frequency;
        
        private double _Phase;
        
        private double _Output;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Frequency {
            get {
                return this._Frequency;
            }
            set {
                this._Frequency = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Phase {
            get {
                return this._Phase;
            }
            set {
                this._Phase = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Frequency")) {
                return this.Frequency;
            }
            if ((name == "Phase")) {
                return this.Phase;
            }
            if ((name == "Output")) {
                return this.Output;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
}
namespace ModellMeister.Library.Sink {
    
    
    public partial class LinePlot : ModellMeister.Runtime.IModelType {
        
        private int _ChannelCount;
        
        private double _Channel1;
        
        private double _Channel2;
        
        private double _Channel3;
        
        private double _Channel4;
        
        private double _Channel5;
        
        private double _Channel6;
        
        partial void DoInit(ModellMeister.Runtime.StepInfo info);
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public int ChannelCount {
            get {
                return this._ChannelCount;
            }
            set {
                this._ChannelCount = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Channel1 {
            get {
                return this._Channel1;
            }
            set {
                this._Channel1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Channel2 {
            get {
                return this._Channel2;
            }
            set {
                this._Channel2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Channel3 {
            get {
                return this._Channel3;
            }
            set {
                this._Channel3 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Channel4 {
            get {
                return this._Channel4;
            }
            set {
                this._Channel4 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Channel5 {
            get {
                return this._Channel5;
            }
            set {
                this._Channel5 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Channel6 {
            get {
                return this._Channel6;
            }
            set {
                this._Channel6 = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "ChannelCount")) {
                return this.ChannelCount;
            }
            if ((name == "Channel1")) {
                return this.Channel1;
            }
            if ((name == "Channel2")) {
                return this.Channel2;
            }
            if ((name == "Channel3")) {
                return this.Channel3;
            }
            if ((name == "Channel4")) {
                return this.Channel4;
            }
            if ((name == "Channel5")) {
                return this.Channel5;
            }
            if ((name == "Channel6")) {
                return this.Channel6;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this.DoInit(info);
        }
    }
}
namespace ModellMeister.Library.Physics {
    
    
    public partial class Body1d : ModellMeister.Runtime.ICompositeModelType {
        
        private double _Force;
        
        private double _Weight;
        
        private double _StartSpeed;
        
        private double _StartPosition;
        
        private double _Acceleration;
        
        private double _Velocity;
        
        private double _Position;
        
        private ModellMeister.Library.Analysis.Integral _Acc2Vel;
        
        private ModellMeister.Library.Analysis.Integral _Vel2Pos;
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Force {
            get {
                return this._Force;
            }
            set {
                this._Force = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Weight {
            get {
                return this._Weight;
            }
            set {
                this._Weight = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double StartSpeed {
            get {
                return this._StartSpeed;
            }
            set {
                this._StartSpeed = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double StartPosition {
            get {
                return this._StartPosition;
            }
            set {
                this._StartPosition = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Acceleration {
            get {
                return this._Acceleration;
            }
            set {
                this._Acceleration = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Velocity {
            get {
                return this._Velocity;
            }
            set {
                this._Velocity = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Position {
            get {
                return this._Position;
            }
            set {
                this._Position = value;
            }
        }
        
        public ModellMeister.Library.Analysis.Integral Acc2Vel {
            get {
                return this._Acc2Vel;
            }
            set {
                this._Acc2Vel = value;
            }
        }
        
        public ModellMeister.Library.Analysis.Integral Vel2Pos {
            get {
                return this._Vel2Pos;
            }
            set {
                this._Vel2Pos = value;
            }
        }
        
        public object GetPortValue(string name) {
            if ((name == "Force")) {
                return this.Force;
            }
            if ((name == "Weight")) {
                return this.Weight;
            }
            if ((name == "StartSpeed")) {
                return this.StartSpeed;
            }
            if ((name == "StartPosition")) {
                return this.StartPosition;
            }
            if ((name == "Acceleration")) {
                return this.Acceleration;
            }
            if ((name == "Velocity")) {
                return this.Velocity;
            }
            if ((name == "Position")) {
                return this.Position;
            }
            throw new System.InvalidOperationException();
        }
        
        public void Init(ModellMeister.Runtime.StepInfo info) {
            this._Acc2Vel = new ModellMeister.Library.Analysis.Integral();
            this._Acc2Vel.Init(info);
            this._Vel2Pos = new ModellMeister.Library.Analysis.Integral();
            this._Vel2Pos.Init(info);
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.Acc2Vel.Input = this.Force;
            this._Acc2Vel.Execute(info);
            this.Vel2Pos.Input = this.Acc2Vel.Output;
            this._Vel2Pos.Execute(info);
            this.Position = this.Vel2Pos.Output;
            this.Velocity = this.Acc2Vel.Output;
        }
        
        public object GetBlock(string name) {
            if ((name == "Acc2Vel")) {
                return this._Acc2Vel;
            }
            if ((name == "Vel2Pos")) {
                return this._Vel2Pos;
            }
            throw new System.InvalidOperationException();
        }
    }
}
