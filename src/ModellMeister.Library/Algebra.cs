//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34014
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModellMeister.Library.Algebra {
    
    
    [ModellMeister.Runtime.RootModelAttribute()]
    public partial class _ : ModellMeister.Runtime.IModelType {
        
        public void Init() {
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
        }
    }
    
    public partial class Addition : ModellMeister.Runtime.IModelType {
        
        private double _Summand1;
        
        private double _Summand2;
        
        private double _Sum;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Summand1 {
            get {
                return this._Summand1;
            }
            set {
                this._Summand1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Summand2 {
            get {
                return this._Summand2;
            }
            set {
                this._Summand2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Sum {
            get {
                return this._Sum;
            }
            set {
                this._Sum = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class Subtraction : ModellMeister.Runtime.IModelType {
        
        private double _Minuend;
        
        private double _Subtrahend;
        
        private double _Difference;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Minuend {
            get {
                return this._Minuend;
            }
            set {
                this._Minuend = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Subtrahend {
            get {
                return this._Subtrahend;
            }
            set {
                this._Subtrahend = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Difference {
            get {
                return this._Difference;
            }
            set {
                this._Difference = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class Multiplication : ModellMeister.Runtime.IModelType {
        
        private double _Factor1;
        
        private double _Factor2;
        
        private double _Product;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Factor1 {
            get {
                return this._Factor1;
            }
            set {
                this._Factor1 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Factor2 {
            get {
                return this._Factor2;
            }
            set {
                this._Factor2 = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Product {
            get {
                return this._Product;
            }
            set {
                this._Product = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class Division : ModellMeister.Runtime.IModelType {
        
        private double _Divident;
        
        private double _Divisor;
        
        private double _Quotient;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Divident {
            get {
                return this._Divident;
            }
            set {
                this._Divident = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Divisor {
            get {
                return this._Divisor;
            }
            set {
                this._Divisor = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Quotient {
            get {
                return this._Quotient;
            }
            set {
                this._Quotient = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class Square : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class SquareRoot : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class Sine : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class Cosine : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class Tangens : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class Exponentation : ModellMeister.Runtime.IModelType {
        
        private double _Base;
        
        private double _Exponent;
        
        private double _Power;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Base {
            get {
                return this._Base;
            }
            set {
                this._Base = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Exponent {
            get {
                return this._Exponent;
            }
            set {
                this._Exponent = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Power {
            get {
                return this._Power;
            }
            set {
                this._Power = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class Reciprocal : ModellMeister.Runtime.IModelType {
        
        private double _Input;
        
        private double _Output;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Input {
            get {
                return this._Input;
            }
            set {
                this._Input = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
    
    public partial class Logarithm : ModellMeister.Runtime.IModelType {
        
        private double _Antilogarithm;
        
        private double _Base;
        
        private double _Output;
        
        partial void DoInit();
        
        partial void DoExecute(ModellMeister.Runtime.StepInfo info);
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Antilogarithm {
            get {
                return this._Antilogarithm;
            }
            set {
                this._Antilogarithm = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Base {
            get {
                return this._Base;
            }
            set {
                this._Base = value;
            }
        }
        
        [ModellMeister.Runtime.Port(ModellMeister.Runtime.PortType.Input)]
        public double Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        public void Execute(ModellMeister.Runtime.StepInfo info) {
            this.DoExecute(info);
        }
        
        public void Init() {
            this.DoInit();
        }
    }
}
